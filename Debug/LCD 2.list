
LCD 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001074  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001278  08001278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800127c  0800127c  0001127c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000004  08001284  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000002c  08001284  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005d1d  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001120  00000000  00000000  00025d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007b8  00000000  00000000  00026e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002aa7  00000000  00000000  00027d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002451  00000000  00000000  0002a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000202c  00000000  00000000  0002ccb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ece0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800122c 	.word	0x0800122c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	0800122c 	.word	0x0800122c

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	; 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	78db      	ldrb	r3, [r3, #3]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	461a      	mov	r2, r3
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	4313      	orrs	r3, r2
 8000252:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d044      	beq.n	80002e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	e038      	b.n	80002dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800026a:	2201      	movs	r2, #1
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4013      	ands	r3, r2
 800027e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	429a      	cmp	r2, r3
 8000286:	d126      	bne.n	80002d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800028e:	220f      	movs	r2, #15
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	43db      	mvns	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4013      	ands	r3, r2
 80002a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	2b28      	cmp	r3, #40	; 0x28
 80002b6:	d105      	bne.n	80002c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80002b8:	2201      	movs	r2, #1
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	409a      	lsls	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	e008      	b.n	80002d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	2b48      	cmp	r3, #72	; 0x48
 80002ca:	d104      	bne.n	80002d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80002cc:	2201      	movs	r2, #1
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	409a      	lsls	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	3301      	adds	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9c3      	bls.n	800026a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d946      	bls.n	800037e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	e03a      	b.n	8000372 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	3308      	adds	r3, #8
 8000300:	2201      	movs	r2, #1
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d127      	bne.n	800036c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000322:	220f      	movs	r2, #15
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	43db      	mvns	r3, r3
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	4013      	ands	r3, r2
 8000334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000336:	69fa      	ldr	r2, [r7, #28]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	4313      	orrs	r3, r2
 8000342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	78db      	ldrb	r3, [r3, #3]
 8000348:	2b28      	cmp	r3, #40	; 0x28
 800034a:	d105      	bne.n	8000358 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3308      	adds	r3, #8
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	78db      	ldrb	r3, [r3, #3]
 800035c:	2b48      	cmp	r3, #72	; 0x48
 800035e:	d105      	bne.n	800036c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3308      	adds	r3, #8
 8000364:	2201      	movs	r2, #1
 8000366:	409a      	lsls	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	3301      	adds	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d9c1      	bls.n	80002fc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	605a      	str	r2, [r3, #4]
  }
}
 800037e:	bf00      	nop
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000394:	2300      	movs	r3, #0
 8000396:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	887b      	ldrh	r3, [r7, #2]
 800039e:	4013      	ands	r3, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003a4:	2301      	movs	r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e001      	b.n	80003ae <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b085      	sub	sp, #20
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003c6:	2300      	movs	r3, #0
 80003c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	887b      	ldrh	r3, [r7, #2]
 80003d0:	4013      	ands	r3, r2
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003d6:	2301      	movs	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	e001      	b.n	80003e0 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80003f8:	887a      	ldrh	r2, [r7, #2]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	611a      	str	r2, [r3, #16]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000414:	887a      	ldrh	r2, [r7, #2]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	615a      	str	r2, [r3, #20]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	460b      	mov	r3, r1
 800042e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d006      	beq.n	8000444 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000436:	4909      	ldr	r1, [pc, #36]	; (800045c <RCC_APB2PeriphClockCmd+0x38>)
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <RCC_APB2PeriphClockCmd+0x38>)
 800043a:	699a      	ldr	r2, [r3, #24]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4313      	orrs	r3, r2
 8000440:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000442:	e006      	b.n	8000452 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000444:	4905      	ldr	r1, [pc, #20]	; (800045c <RCC_APB2PeriphClockCmd+0x38>)
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <RCC_APB2PeriphClockCmd+0x38>)
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	43db      	mvns	r3, r3
 800044e:	4013      	ands	r3, r2
 8000450:	618b      	str	r3, [r1, #24]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000

08000460 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d006      	beq.n	8000480 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000472:	4909      	ldr	r1, [pc, #36]	; (8000498 <RCC_APB1PeriphClockCmd+0x38>)
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <RCC_APB1PeriphClockCmd+0x38>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800047e:	e006      	b.n	800048e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000480:	4905      	ldr	r1, [pc, #20]	; (8000498 <RCC_APB1PeriphClockCmd+0x38>)
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <RCC_APB1PeriphClockCmd+0x38>)
 8000484:	69da      	ldr	r2, [r3, #28]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	43db      	mvns	r3, r3
 800048a:	4013      	ands	r3, r2
 800048c:	61cb      	str	r3, [r1, #28]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000

0800049c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a2e      	ldr	r2, [pc, #184]	; (800056c <TIM_TimeBaseInit+0xd0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d013      	beq.n	80004e0 <TIM_TimeBaseInit+0x44>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2d      	ldr	r2, [pc, #180]	; (8000570 <TIM_TimeBaseInit+0xd4>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d00f      	beq.n	80004e0 <TIM_TimeBaseInit+0x44>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004c6:	d00b      	beq.n	80004e0 <TIM_TimeBaseInit+0x44>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a2a      	ldr	r2, [pc, #168]	; (8000574 <TIM_TimeBaseInit+0xd8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d007      	beq.n	80004e0 <TIM_TimeBaseInit+0x44>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a29      	ldr	r2, [pc, #164]	; (8000578 <TIM_TimeBaseInit+0xdc>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d003      	beq.n	80004e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a28      	ldr	r2, [pc, #160]	; (800057c <TIM_TimeBaseInit+0xe0>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d108      	bne.n	80004f2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80004e0:	89fb      	ldrh	r3, [r7, #14]
 80004e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004e6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	885a      	ldrh	r2, [r3, #2]
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	4313      	orrs	r3, r2
 80004f0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a22      	ldr	r2, [pc, #136]	; (8000580 <TIM_TimeBaseInit+0xe4>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d00c      	beq.n	8000514 <TIM_TimeBaseInit+0x78>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a21      	ldr	r2, [pc, #132]	; (8000584 <TIM_TimeBaseInit+0xe8>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d008      	beq.n	8000514 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000502:	89fb      	ldrh	r3, [r7, #14]
 8000504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000508:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	88da      	ldrh	r2, [r3, #6]
 800050e:	89fb      	ldrh	r3, [r7, #14]
 8000510:	4313      	orrs	r3, r2
 8000512:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	89fa      	ldrh	r2, [r7, #14]
 8000518:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	889a      	ldrh	r2, [r3, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	881a      	ldrh	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <TIM_TimeBaseInit+0xd0>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d00f      	beq.n	8000552 <TIM_TimeBaseInit+0xb6>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <TIM_TimeBaseInit+0xd4>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d00b      	beq.n	8000552 <TIM_TimeBaseInit+0xb6>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <TIM_TimeBaseInit+0xec>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d007      	beq.n	8000552 <TIM_TimeBaseInit+0xb6>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <TIM_TimeBaseInit+0xf0>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d003      	beq.n	8000552 <TIM_TimeBaseInit+0xb6>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a10      	ldr	r2, [pc, #64]	; (8000590 <TIM_TimeBaseInit+0xf4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d104      	bne.n	800055c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	7a1b      	ldrb	r3, [r3, #8]
 8000556:	b29a      	uxth	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2201      	movs	r2, #1
 8000560:	829a      	strh	r2, [r3, #20]
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40012c00 	.word	0x40012c00
 8000570:	40013400 	.word	0x40013400
 8000574:	40000400 	.word	0x40000400
 8000578:	40000800 	.word	0x40000800
 800057c:	40000c00 	.word	0x40000c00
 8000580:	40001000 	.word	0x40001000
 8000584:	40001400 	.word	0x40001400
 8000588:	40014000 	.word	0x40014000
 800058c:	40014400 	.word	0x40014400
 8000590:	40014800 	.word	0x40014800

08000594 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d008      	beq.n	80005b8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80005b6:	e007      	b.n	80005c8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	f023 0301 	bic.w	r3, r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	801a      	strh	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	807b      	strh	r3, [r7, #2]
 80005de:	4613      	mov	r3, r2
 80005e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005e2:	787b      	ldrb	r3, [r7, #1]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	899b      	ldrh	r3, [r3, #12]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80005f8:	e009      	b.n	800060e <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	899b      	ldrh	r3, [r3, #12]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	43db      	mvns	r3, r3
 8000604:	b29b      	uxth	r3, r3
 8000606:	4013      	ands	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	819a      	strh	r2, [r3, #12]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000628:	2300      	movs	r3, #0
 800062a:	81bb      	strh	r3, [r7, #12]
 800062c:	2300      	movs	r3, #0
 800062e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	8a1b      	ldrh	r3, [r3, #16]
 8000634:	b29a      	uxth	r2, r3
 8000636:	887b      	ldrh	r3, [r7, #2]
 8000638:	4013      	ands	r3, r2
 800063a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	b29a      	uxth	r2, r3
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	4013      	ands	r3, r2
 8000646:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000648:	89bb      	ldrh	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <TIM_GetITStatus+0x42>
 800064e:	897b      	ldrh	r3, [r7, #10]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e001      	b.n	800065e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000676:	887b      	ldrh	r3, [r7, #2]
 8000678:	43db      	mvns	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	821a      	strh	r2, [r3, #16]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	889b      	ldrh	r3, [r3, #4]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	4013      	ands	r3, r2
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006c8:	2301      	movs	r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e001      	b.n	80006d2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80006de:	b480      	push	{r7}
 80006e0:	b087      	sub	sp, #28
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	b2db      	uxtb	r3, r3
 8000702:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	f003 031f 	and.w	r3, r3, #31
 800070a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800070c:	2201      	movs	r2, #1
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d107      	bne.n	800072c <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	899b      	ldrh	r3, [r3, #12]
 8000720:	b29b      	uxth	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4013      	ands	r3, r2
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e011      	b.n	8000750 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d107      	bne.n	8000742 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8a1b      	ldrh	r3, [r3, #16]
 8000736:	b29b      	uxth	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	4013      	ands	r3, r2
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e006      	b.n	8000750 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8a9b      	ldrh	r3, [r3, #20]
 8000746:	b29b      	uxth	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	4013      	ands	r3, r2
 800074e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	0a1b      	lsrs	r3, r3, #8
 8000754:	b29b      	uxth	r3, r3
 8000756:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000758:	2201      	movs	r2, #1
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4013      	ands	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <USART_GetITStatus+0xa4>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800077c:	2301      	movs	r3, #1
 800077e:	74fb      	strb	r3, [r7, #19]
 8000780:	e001      	b.n	8000786 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000786:	7cfb      	ldrb	r3, [r7, #19]
}
 8000788:	4618      	mov	r0, r3
 800078a:	371c      	adds	r7, #28
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <Usart_Get>:


}

uint8_t Usart_Get(USART_TypeDef* USARTx)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
     while (USART_GetFlagStatus(USARTx, USART_FLAG_RXNE) == RESET);
 800079a:	bf00      	nop
 800079c:	2120      	movs	r1, #32
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff82 	bl	80006a8 <USART_GetFlagStatus>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f8      	beq.n	800079c <Usart_Get+0xa>
     return (uint8_t)USART_ReceiveData(USARTx);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff6d 	bl	800068a <USART_ReceiveData>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b2db      	uxtb	r3, r3
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <Usart_PutChar>:

void Usart_PutChar(USART_TypeDef* USARTx, uint8_t ch)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
  while(!(USARTx->SR & USART_SR_TXE));
 80007c8:	bf00      	nop
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f8      	beq.n	80007ca <Usart_PutChar+0xe>
  USARTx->DR = ch;
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	809a      	strh	r2, [r3, #4]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <Usart_PutString>:


void Usart_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
  while(*str !=  0)
 80007f4:	e008      	b.n	8000808 <Usart_PutString+0x1e>
  {
    Usart_PutChar(USARTx, *str);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffdd 	bl	80007bc <Usart_PutChar>
    str++;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	603b      	str	r3, [r7, #0]
  while(*str !=  0)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f2      	bne.n	80007f6 <Usart_PutString+0xc>
  }
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Usart_PutNumber>:


void Usart_PutNumber(USART_TypeDef* USARTx, uint32_t x)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  char value[10]; //a temp array to hold results of conversion
  int i = 0; //loop index
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

  do
  {
    value[i++] = (char)(x % 10) + '0'; //convert integer to character
 8000826:	6979      	ldr	r1, [r7, #20]
 8000828:	1c4b      	adds	r3, r1, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	6838      	ldr	r0, [r7, #0]
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <Usart_PutNumber+0x74>)
 8000830:	fba3 2300 	umull	r2, r3, r3, r0
 8000834:	08da      	lsrs	r2, r3, #3
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	1ac2      	subs	r2, r0, r3
 8000840:	b2d3      	uxtb	r3, r2
 8000842:	3330      	adds	r3, #48	; 0x30
 8000844:	b2da      	uxtb	r2, r3
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	440b      	add	r3, r1
 800084c:	f803 2c10 	strb.w	r2, [r3, #-16]
    x /= 10;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <Usart_PutNumber+0x74>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	603b      	str	r3, [r7, #0]
  } while(x);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1e1      	bne.n	8000826 <Usart_PutNumber+0xe>

  while(i) //send data
 8000862:	e00b      	b.n	800087c <Usart_PutNumber+0x64>
  {
    Usart_PutChar(USARTx, value[--i]);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3b01      	subs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	f107 0208 	add.w	r2, r7, #8
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffa0 	bl	80007bc <Usart_PutChar>
  while(i) //send data
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f0      	bne.n	8000864 <Usart_PutNumber+0x4c>
  }
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	cccccccd 	.word	0xcccccccd

08000890 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da0b      	bge.n	80008bc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80008a4:	490d      	ldr	r1, [pc, #52]	; (80008dc <NVIC_SetPriority+0x4c>)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	3b04      	subs	r3, #4
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80008ba:	e009      	b.n	80008d0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80008bc:	4908      	ldr	r1, [pc, #32]	; (80008e0 <NVIC_SetPriority+0x50>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <SysTick_Handler>:

static __IO uint32_t usTicks;


// SysTick interrupt handler
void SysTick_Handler(void) {
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	DelayCounter++;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Handler+0x18>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a03      	ldr	r2, [pc, #12]	; (80008fc <SysTick_Handler+0x18>)
 80008f0:	6013      	str	r3, [r2, #0]
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000020 	.word	0x20000020

08000900 <delay_init>:

// Initialize delay functions
// note: configures the SysTick counter, must be called each time when the core
//       clock has been changed
void delay_init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	// Set reload register to generate IRQ every millisecond
	SysTick->LOAD = (uint32_t)(SystemCoreClock / (1000UL - 1UL));
 8000904:	490b      	ldr	r1, [pc, #44]	; (8000934 <delay_init+0x34>)
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <delay_init+0x38>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <delay_init+0x3c>)
 800090c:	fba3 0302 	umull	r0, r3, r3, r2
 8000910:	1ad2      	subs	r2, r2, r3
 8000912:	0852      	lsrs	r2, r2, #1
 8000914:	4413      	add	r3, r2
 8000916:	0a5b      	lsrs	r3, r3, #9
 8000918:	604b      	str	r3, [r1, #4]

	// Set priority for SysTick IRQ
	NVIC_SetPriority(SysTick_IRQn,(1 << __NVIC_PRIO_BITS) - 1);
 800091a:	210f      	movs	r1, #15
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f7ff ffb6 	bl	8000890 <NVIC_SetPriority>

	// Set the SysTick counter value
	SysTick->VAL = 0UL;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <delay_init+0x34>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]

	// Set SysTick source and IRQ
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk);
 800092a:	4b02      	ldr	r3, [pc, #8]	; (8000934 <delay_init+0x34>)
 800092c:	2206      	movs	r2, #6
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	e000e010 	.word	0xe000e010
 8000938:	20000000 	.word	0x20000000
 800093c:	06680a41 	.word	0x06680a41

08000940 <delay_ms>:

// Do a delay for a specified number of milliseconds
// input:
//   ms - number of milliseconds to wait
void delay_ms(uint32_t ms) {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	// Enable the SysTick timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000948:	4a0c      	ldr	r2, [pc, #48]	; (800097c <delay_ms+0x3c>)
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <delay_ms+0x3c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

	// Wait for a specified number of milliseconds
	DelayCounter = 0;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <delay_ms+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
	while (DelayCounter < ms);
 800095a:	bf00      	nop
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <delay_ms+0x40>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d3fa      	bcc.n	800095c <delay_ms+0x1c>

	// Disable the SysTick timer
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <delay_ms+0x3c>)
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <delay_ms+0x3c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 0301 	bic.w	r3, r3, #1
 8000970:	6013      	str	r3, [r2, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	e000e010 	.word	0xe000e010
 8000980:	20000020 	.word	0x20000020

08000984 <KeypadInit>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void KeypadInit()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	delay_init();
 8000988:	f7ff ffba 	bl	8000900 <delay_init>

	// GPIO clock for keypad columns and rows
	RCC_APB2PeriphClockCmd(KEYPAD_RCC_GPIO_COL, ENABLE);
 800098c:	2101      	movs	r1, #1
 800098e:	2004      	movs	r0, #4
 8000990:	f7ff fd48 	bl	8000424 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(KEYPAD_RCC_GPIO_ROW, ENABLE);
 8000994:	2101      	movs	r1, #1
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff fd44 	bl	8000424 <RCC_APB2PeriphClockCmd>

	// Configure GPIO as output open drain for keypad columns
	_GPIO_InitStructKeypad.GPIO_Pin = KEYPAD_PIN_COL0 | KEYPAD_PIN_COL1 | KEYPAD_PIN_COL2 ;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <KeypadInit+0x50>)
 800099e:	22e0      	movs	r2, #224	; 0xe0
 80009a0:	801a      	strh	r2, [r3, #0]
	_GPIO_InitStructKeypad.GPIO_Mode = GPIO_Mode_Out_OD;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <KeypadInit+0x50>)
 80009a4:	2214      	movs	r2, #20
 80009a6:	70da      	strb	r2, [r3, #3]
	_GPIO_InitStructKeypad.GPIO_Speed = GPIO_Speed_2MHz;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <KeypadInit+0x50>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	709a      	strb	r2, [r3, #2]
	GPIO_Init(KEYPAD_GPIO_COL, &_GPIO_InitStructKeypad);
 80009ae:	4909      	ldr	r1, [pc, #36]	; (80009d4 <KeypadInit+0x50>)
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <KeypadInit+0x54>)
 80009b2:	f7ff fc2d 	bl	8000210 <GPIO_Init>

	// Configure GPIO as input with pull-up resistor for keypad rows
	_GPIO_InitStructKeypad.GPIO_Pin = KEYPAD_PIN_ROW0 | KEYPAD_PIN_ROW1 | KEYPAD_PIN_ROW2 | KEYPAD_PIN_ROW3;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <KeypadInit+0x50>)
 80009b8:	221e      	movs	r2, #30
 80009ba:	801a      	strh	r2, [r3, #0]
	_GPIO_InitStructKeypad.GPIO_Mode = GPIO_Mode_IPU;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <KeypadInit+0x50>)
 80009be:	2248      	movs	r2, #72	; 0x48
 80009c0:	70da      	strb	r2, [r3, #3]
	_GPIO_InitStructKeypad.GPIO_Speed = GPIO_Speed_2MHz;
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <KeypadInit+0x50>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	709a      	strb	r2, [r3, #2]
	GPIO_Init(KEYPAD_GPIO_ROW, &_GPIO_InitStructKeypad);
 80009c8:	4902      	ldr	r1, [pc, #8]	; (80009d4 <KeypadInit+0x50>)
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <KeypadInit+0x54>)
 80009cc:	f7ff fc20 	bl	8000210 <GPIO_Init>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000024 	.word	0x20000024
 80009d8:	40010800 	.word	0x40010800

080009dc <KeypadGetKey>:
  * @param	None
  * @retval	Pressed key char value.
  ******************************************************************************
  */
uint8_t KeypadGetKey()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	// Scan column 0 (column 0 pin is grounded, other column pins is open drain)
	GPIO_ResetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL0);
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	484d      	ldr	r0, [pc, #308]	; (8000b18 <KeypadGetKey+0x13c>)
 80009e4:	f7ff fd10 	bl	8000408 <GPIO_ResetBits>
	GPIO_SetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL1);
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	484b      	ldr	r0, [pc, #300]	; (8000b18 <KeypadGetKey+0x13c>)
 80009ec:	f7ff fcfe 	bl	80003ec <GPIO_SetBits>
	GPIO_SetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL2);
 80009f0:	2120      	movs	r1, #32
 80009f2:	4849      	ldr	r0, [pc, #292]	; (8000b18 <KeypadGetKey+0x13c>)
 80009f4:	f7ff fcfa 	bl	80003ec <GPIO_SetBits>

	delay_ms(20);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f7ff ffa1 	bl	8000940 <delay_ms>
	// Read rows
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW0))
 80009fe:	2110      	movs	r1, #16
 8000a00:	4845      	ldr	r0, [pc, #276]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a02:	f7ff fcc1 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d101      	bne.n	8000a10 <KeypadGetKey+0x34>
		return '#';
 8000a0c:	2323      	movs	r3, #35	; 0x23
 8000a0e:	e081      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW1))
 8000a10:	2108      	movs	r1, #8
 8000a12:	4841      	ldr	r0, [pc, #260]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a14:	f7ff fcb8 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <KeypadGetKey+0x46>
		return '9';
 8000a1e:	2339      	movs	r3, #57	; 0x39
 8000a20:	e078      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW2))
 8000a22:	2104      	movs	r1, #4
 8000a24:	483c      	ldr	r0, [pc, #240]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a26:	f7ff fcaf 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <KeypadGetKey+0x58>
		return '6';
 8000a30:	2336      	movs	r3, #54	; 0x36
 8000a32:	e06f      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW3))
 8000a34:	2102      	movs	r1, #2
 8000a36:	4838      	ldr	r0, [pc, #224]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a38:	f7ff fca6 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <KeypadGetKey+0x6a>
		return '3';
 8000a42:	2333      	movs	r3, #51	; 0x33
 8000a44:	e066      	b.n	8000b14 <KeypadGetKey+0x138>

	// Scan column 1 (column 1 pin is grounded, other column pins is open drain)
	GPIO_SetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL0);
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	4833      	ldr	r0, [pc, #204]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a4a:	f7ff fccf 	bl	80003ec <GPIO_SetBits>
	GPIO_ResetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL1);
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a52:	f7ff fcd9 	bl	8000408 <GPIO_ResetBits>
	GPIO_SetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL2);
 8000a56:	2120      	movs	r1, #32
 8000a58:	482f      	ldr	r0, [pc, #188]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a5a:	f7ff fcc7 	bl	80003ec <GPIO_SetBits>

	delay_ms(20);
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f7ff ff6e 	bl	8000940 <delay_ms>
	// Read rows
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW0))
 8000a64:	2110      	movs	r1, #16
 8000a66:	482c      	ldr	r0, [pc, #176]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a68:	f7ff fc8e 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <KeypadGetKey+0x9a>
		return '0';
 8000a72:	2330      	movs	r3, #48	; 0x30
 8000a74:	e04e      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW1))
 8000a76:	2108      	movs	r1, #8
 8000a78:	4827      	ldr	r0, [pc, #156]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a7a:	f7ff fc85 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <KeypadGetKey+0xac>
		return '8';
 8000a84:	2338      	movs	r3, #56	; 0x38
 8000a86:	e045      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW2))
 8000a88:	2104      	movs	r1, #4
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a8c:	f7ff fc7c 	bl	8000388 <GPIO_ReadInputDataBit>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <KeypadGetKey+0xbe>
		return '5';
 8000a96:	2335      	movs	r3, #53	; 0x35
 8000a98:	e03c      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW3))
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	481e      	ldr	r0, [pc, #120]	; (8000b18 <KeypadGetKey+0x13c>)
 8000a9e:	f7ff fc73 	bl	8000388 <GPIO_ReadInputDataBit>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <KeypadGetKey+0xd0>
		return '2';
 8000aa8:	2332      	movs	r3, #50	; 0x32
 8000aaa:	e033      	b.n	8000b14 <KeypadGetKey+0x138>

	// Scan column 2 (column 2 pin is grounded, other column pins is open drain)
	GPIO_SetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL0);
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	481a      	ldr	r0, [pc, #104]	; (8000b18 <KeypadGetKey+0x13c>)
 8000ab0:	f7ff fc9c 	bl	80003ec <GPIO_SetBits>
	GPIO_SetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL1);
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	4818      	ldr	r0, [pc, #96]	; (8000b18 <KeypadGetKey+0x13c>)
 8000ab8:	f7ff fc98 	bl	80003ec <GPIO_SetBits>
	GPIO_ResetBits(KEYPAD_GPIO_COL, KEYPAD_PIN_COL2);
 8000abc:	2120      	movs	r1, #32
 8000abe:	4816      	ldr	r0, [pc, #88]	; (8000b18 <KeypadGetKey+0x13c>)
 8000ac0:	f7ff fca2 	bl	8000408 <GPIO_ResetBits>

	delay_ms(20);
 8000ac4:	2014      	movs	r0, #20
 8000ac6:	f7ff ff3b 	bl	8000940 <delay_ms>
	// Read rows
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW0))
 8000aca:	2110      	movs	r1, #16
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <KeypadGetKey+0x13c>)
 8000ace:	f7ff fc5b 	bl	8000388 <GPIO_ReadInputDataBit>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <KeypadGetKey+0x100>
		return '*';
 8000ad8:	232a      	movs	r3, #42	; 0x2a
 8000ada:	e01b      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW1))
 8000adc:	2108      	movs	r1, #8
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <KeypadGetKey+0x13c>)
 8000ae0:	f7ff fc52 	bl	8000388 <GPIO_ReadInputDataBit>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <KeypadGetKey+0x112>
		return '7';
 8000aea:	2337      	movs	r3, #55	; 0x37
 8000aec:	e012      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW2))
 8000aee:	2104      	movs	r1, #4
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <KeypadGetKey+0x13c>)
 8000af2:	f7ff fc49 	bl	8000388 <GPIO_ReadInputDataBit>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <KeypadGetKey+0x124>
		return '4';
 8000afc:	2334      	movs	r3, #52	; 0x34
 8000afe:	e009      	b.n	8000b14 <KeypadGetKey+0x138>
	if (!GPIO_ReadInputDataBit(KEYPAD_GPIO_ROW, KEYPAD_PIN_ROW3))
 8000b00:	2102      	movs	r1, #2
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <KeypadGetKey+0x13c>)
 8000b04:	f7ff fc40 	bl	8000388 <GPIO_ReadInputDataBit>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <KeypadGetKey+0x136>
		return '1';
 8000b0e:	2331      	movs	r3, #49	; 0x31
 8000b10:	e000      	b.n	8000b14 <KeypadGetKey+0x138>


	return KEYPAD_NO_PRESSED;
 8000b12:	23ff      	movs	r3, #255	; 0xff
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010800 	.word	0x40010800

08000b1c <lcd_init>:
void strobeEN(void);
void upNib(uint8_t c);
void downNib(uint8_t c);
void Delay(uint32_t nCount);

void lcd_init(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStructure;
 //Init GPIOs
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	2010      	movs	r0, #16
 8000b26:	f7ff fc7d 	bl	8000424 <RCC_APB2PeriphClockCmd>
 GPIO_InitStructure.GPIO_Pin   = EN | RS | D4 | D5 | D6 | D7;
 8000b2a:	23f3      	movs	r3, #243	; 0xf3
 8000b2c:	80bb      	strh	r3, [r7, #4]
 GPIO_ResetBits(LCD_Port, EN | RS | D4 | D5 | D6 | D7);
 8000b2e:	21f3      	movs	r1, #243	; 0xf3
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <lcd_init+0x78>)
 8000b32:	f7ff fc69 	bl	8000408 <GPIO_ResetBits>
 GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 8000b36:	2310      	movs	r3, #16
 8000b38:	71fb      	strb	r3, [r7, #7]
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	71bb      	strb	r3, [r7, #6]
 GPIO_Init(LCD_Port, &GPIO_InitStructure);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <lcd_init+0x78>)
 8000b44:	f7ff fb64 	bl	8000210 <GPIO_Init>

 GPIO_ResetBits(LCD_Port, EN | RS | D4 | D5 | D6 | D7);
 8000b48:	21f3      	movs	r1, #243	; 0xf3
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <lcd_init+0x78>)
 8000b4c:	f7ff fc5c 	bl	8000408 <GPIO_ResetBits>
 Delay(0xffff);
 8000b50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b54:	f000 f934 	bl	8000dc0 <Delay>
 sendCMD(0x02);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f000 f8bb 	bl	8000cd4 <sendCMD>
 Delay(0x3FFFC);  //wait 20ms
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <lcd_init+0x7c>)
 8000b60:	f000 f92e 	bl	8000dc0 <Delay>
 sendCMD(0x28);  //LCD configs
 8000b64:	2028      	movs	r0, #40	; 0x28
 8000b66:	f000 f8b5 	bl	8000cd4 <sendCMD>
 sendCMD(0x06);
 8000b6a:	2006      	movs	r0, #6
 8000b6c:	f000 f8b2 	bl	8000cd4 <sendCMD>
 sendCMD(0x01);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 f8af 	bl	8000cd4 <sendCMD>
 sendCMD(0x0E);
 8000b76:	200e      	movs	r0, #14
 8000b78:	f000 f8ac 	bl	8000cd4 <sendCMD>
 sendCMD(0x0C);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f000 f8a9 	bl	8000cd4 <sendCMD>
 Delay(0xffff);
 8000b82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b86:	f000 f91b 	bl	8000dc0 <Delay>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40011000 	.word	0x40011000
 8000b98:	0003fffc 	.word	0x0003fffc

08000b9c <strobeEN>:

void strobeEN(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
 Delay(6000);
 8000ba0:	f241 7070 	movw	r0, #6000	; 0x1770
 8000ba4:	f000 f90c 	bl	8000dc0 <Delay>
 GPIO_SetBits(LCD_Port, EN);
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <strobeEN+0x28>)
 8000bac:	f7ff fc1e 	bl	80003ec <GPIO_SetBits>
 Delay(6000);
 8000bb0:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bb4:	f000 f904 	bl	8000dc0 <Delay>
 GPIO_ResetBits(LCD_Port, EN);
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <strobeEN+0x28>)
 8000bbc:	f7ff fc24 	bl	8000408 <GPIO_ResetBits>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <upNib>:

void upNib(uint8_t c) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
 if(c & 0x80)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da04      	bge.n	8000be4 <upNib+0x1c>
  GPIO_SetBits(LCD_Port, D7);
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	481a      	ldr	r0, [pc, #104]	; (8000c48 <upNib+0x80>)
 8000bde:	f7ff fc05 	bl	80003ec <GPIO_SetBits>
 8000be2:	e003      	b.n	8000bec <upNib+0x24>
 else
  GPIO_ResetBits(LCD_Port, D7);
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <upNib+0x80>)
 8000be8:	f7ff fc0e 	bl	8000408 <GPIO_ResetBits>
 if(c & 0x40)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <upNib+0x38>
  GPIO_SetBits(LCD_Port, D6);
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <upNib+0x80>)
 8000bfa:	f7ff fbf7 	bl	80003ec <GPIO_SetBits>
 8000bfe:	e003      	b.n	8000c08 <upNib+0x40>
 else
  GPIO_ResetBits(LCD_Port, D6);
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <upNib+0x80>)
 8000c04:	f7ff fc00 	bl	8000408 <GPIO_ResetBits>
 if(c & 0x20)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <upNib+0x54>
  GPIO_SetBits(LCD_Port, D5);
 8000c12:	2120      	movs	r1, #32
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <upNib+0x80>)
 8000c16:	f7ff fbe9 	bl	80003ec <GPIO_SetBits>
 8000c1a:	e003      	b.n	8000c24 <upNib+0x5c>
 else
  GPIO_ResetBits(LCD_Port, D5);
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <upNib+0x80>)
 8000c20:	f7ff fbf2 	bl	8000408 <GPIO_ResetBits>
 if(c & 0x10)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <upNib+0x70>
  GPIO_SetBits(LCD_Port, D4);
 8000c2e:	2110      	movs	r1, #16
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <upNib+0x80>)
 8000c32:	f7ff fbdb 	bl	80003ec <GPIO_SetBits>
 else
  GPIO_ResetBits(LCD_Port, D4);
}
 8000c36:	e003      	b.n	8000c40 <upNib+0x78>
  GPIO_ResetBits(LCD_Port, D4);
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <upNib+0x80>)
 8000c3c:	f7ff fbe4 	bl	8000408 <GPIO_ResetBits>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40011000 	.word	0x40011000

08000c4c <downNib>:

void downNib(uint8_t c) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
 if(c & 0x8)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <downNib+0x1e>
  GPIO_SetBits(LCD_Port, D7);
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <downNib+0x84>)
 8000c64:	f7ff fbc2 	bl	80003ec <GPIO_SetBits>
 8000c68:	e003      	b.n	8000c72 <downNib+0x26>
 else
  GPIO_ResetBits(LCD_Port, D7);
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <downNib+0x84>)
 8000c6e:	f7ff fbcb 	bl	8000408 <GPIO_ResetBits>
 if(c & 0x4)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d004      	beq.n	8000c86 <downNib+0x3a>
  GPIO_SetBits(LCD_Port, D6);
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <downNib+0x84>)
 8000c80:	f7ff fbb4 	bl	80003ec <GPIO_SetBits>
 8000c84:	e003      	b.n	8000c8e <downNib+0x42>
 else
  GPIO_ResetBits(LCD_Port, D6);
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <downNib+0x84>)
 8000c8a:	f7ff fbbd 	bl	8000408 <GPIO_ResetBits>
 if(c & 0x2)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <downNib+0x56>
  GPIO_SetBits(LCD_Port, D5);
 8000c98:	2120      	movs	r1, #32
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <downNib+0x84>)
 8000c9c:	f7ff fba6 	bl	80003ec <GPIO_SetBits>
 8000ca0:	e003      	b.n	8000caa <downNib+0x5e>
 else
  GPIO_ResetBits(LCD_Port, D5);
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <downNib+0x84>)
 8000ca6:	f7ff fbaf 	bl	8000408 <GPIO_ResetBits>
 if(c & 0x1)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <downNib+0x72>
  GPIO_SetBits(LCD_Port, D4);
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <downNib+0x84>)
 8000cb8:	f7ff fb98 	bl	80003ec <GPIO_SetBits>
 else
  GPIO_ResetBits(LCD_Port, D4);
}
 8000cbc:	e003      	b.n	8000cc6 <downNib+0x7a>
  GPIO_ResetBits(LCD_Port, D4);
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <downNib+0x84>)
 8000cc2:	f7ff fba1 	bl	8000408 <GPIO_ResetBits>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40011000 	.word	0x40011000

08000cd4 <sendCMD>:

void sendCMD(uint8_t c) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
 GPIO_ResetBits(LCD_Port, RS);
 8000cde:	2101      	movs	r1, #1
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <sendCMD+0x34>)
 8000ce2:	f7ff fb91 	bl	8000408 <GPIO_ResetBits>
 upNib(c);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff6d 	bl	8000bc8 <upNib>
 strobeEN();
 8000cee:	f7ff ff55 	bl	8000b9c <strobeEN>
 downNib(c);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffa9 	bl	8000c4c <downNib>
 strobeEN();
 8000cfa:	f7ff ff4f 	bl	8000b9c <strobeEN>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40011000 	.word	0x40011000

08000d0c <lcd_putc>:

void lcd_putc(char c) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
 if(((c>=0x20)&&(c<=0x7F)) || ((c>=0xA0)&&(c<=0xFF)))
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b1f      	cmp	r3, #31
 8000d1a:	d903      	bls.n	8000d24 <lcd_putc+0x18>
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da02      	bge.n	8000d2a <lcd_putc+0x1e>
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b9f      	cmp	r3, #159	; 0x9f
 8000d28:	d913      	bls.n	8000d52 <lcd_putc+0x46>
  { //check if 'c' is within display boundry
  GPIO_SetBits(LCD_Port, RS);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <lcd_putc+0x50>)
 8000d2e:	f7ff fb5d 	bl	80003ec <GPIO_SetBits>
  upNib(c);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff47 	bl	8000bc8 <upNib>
  strobeEN();
 8000d3a:	f7ff ff2f 	bl	8000b9c <strobeEN>
  downNib(c);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff83 	bl	8000c4c <downNib>
  strobeEN();
 8000d46:	f7ff ff29 	bl	8000b9c <strobeEN>
  GPIO_ResetBits(LCD_Port, RS);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <lcd_putc+0x50>)
 8000d4e:	f7ff fb5b 	bl	8000408 <GPIO_ResetBits>
 }
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40011000 	.word	0x40011000

08000d60 <lcd_print>:

void lcd_print(char *s) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 uint8_t i=0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

 while(s[i] != '\0') {
 8000d6c:	e009      	b.n	8000d82 <lcd_print+0x22>
  lcd_putc(s[i]);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffc8 	bl	8000d0c <lcd_putc>
  i++;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 while(s[i] != '\0') {
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1ef      	bne.n	8000d6e <lcd_print+0xe>
 }
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <lcd_clear>:

void lcd_clear(void) {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
 sendCMD(0x01);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff9a 	bl	8000cd4 <sendCMD>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <lcd_line1>:

void lcd_line1(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
 sendCMD(0x80);
 8000da8:	2080      	movs	r0, #128	; 0x80
 8000daa:	f7ff ff93 	bl	8000cd4 <sendCMD>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <lcd_line2>:

void lcd_line2(void) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
 sendCMD(0xC0);
 8000db6:	20c0      	movs	r0, #192	; 0xc0
 8000db8:	f7ff ff8c 	bl	8000cd4 <sendCMD>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Delay>:
* Output         : None
* Return         : None
* Note      : ffff=5mS
*******************************************************************************/
void Delay(uint32_t nCount)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000dc8:	e002      	b.n	8000dd0 <Delay+0x10>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f9      	bne.n	8000dca <Delay+0xa>
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <main>:
//#define BOTAO		GPIO_Pin_0
//#define PORTABOTAO	GPIOA


int main()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC,  ENABLE);
 8000de6:	2101      	movs	r1, #1
 8000de8:	2018      	movs	r0, #24
 8000dea:	f7ff fb1b 	bl	8000424 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000dee:	2101      	movs	r1, #1
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff fb35 	bl	8000460 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;


	GPIO_InitStructure.GPIO_Pin = LEDAZUL | LEDVERDE ;
 8000df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfa:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e00:	2303      	movs	r3, #3
 8000e02:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(PORTALED, &GPIO_InitStructure);
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	484f      	ldr	r0, [pc, #316]	; (8000f48 <main+0x168>)
 8000e0c:	f7ff fa00 	bl	8000210 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = LEDAZUL | LEDVERDE ;
 8000e10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e14:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000e16:	2310      	movs	r3, #16
 8000e18:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(PORTALED, &GPIO_InitStructure);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	4848      	ldr	r0, [pc, #288]	; (8000f48 <main+0x168>)
 8000e26:	f7ff f9f3 	bl	8000210 <GPIO_Init>
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(PORTABOTAO, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TimerInitStructure;
	TimerInitStructure.TIM_Prescaler = 4000-1;
 8000e2a:	f640 739f 	movw	r3, #3999	; 0xf9f
 8000e2e:	803b      	strh	r3, [r7, #0]
	TimerInitStructure.TIM_Period = 4000-1;
 8000e30:	f640 739f 	movw	r3, #3999	; 0xf9f
 8000e34:	80bb      	strh	r3, [r7, #4]
	TimerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000e36:	2300      	movs	r3, #0
 8000e38:	807b      	strh	r3, [r7, #2]
	TimerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	TimerInitStructure.TIM_RepetitionCounter = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	723b      	strb	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &TimerInitStructure);
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e4a:	f7ff fb27 	bl	800049c <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e54:	f7ff fb9e 	bl	8000594 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e60:	f7ff fbb7 	bl	80005d2 <TIM_ITConfig>

	 lcd_init();
 8000e64:	f7ff fe5a 	bl	8000b1c <lcd_init>
	 KeypadInit();
 8000e68:	f7ff fd8c 	bl	8000984 <KeypadInit>
	 delay_init();
 8000e6c:	f7ff fd48 	bl	8000900 <delay_init>
	 lcd_clear();
 8000e70:	f7ff ff91 	bl	8000d96 <lcd_clear>

	 while(1)
	 {
		  lcd_clear();
 8000e74:	f7ff ff8f 	bl	8000d96 <lcd_clear>
		  lcd_line1();
 8000e78:	f7ff ff94 	bl	8000da4 <lcd_line1>
		  lcd_print("VAMOS");
 8000e7c:	4833      	ldr	r0, [pc, #204]	; (8000f4c <main+0x16c>)
 8000e7e:	f7ff ff6f 	bl	8000d60 <lcd_print>
		  delay_ms(50);
 8000e82:	2032      	movs	r0, #50	; 0x32
 8000e84:	f7ff fd5c 	bl	8000940 <delay_ms>
		   //Get key pressed
		  key = KeypadGetKey();
 8000e88:	f7ff fda8 	bl	80009dc <KeypadGetKey>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <main+0x170>)
 8000e92:	701a      	strb	r2, [r3, #0]
//		  {
//				lcd_line2();
//				lcd_putc(key);
//				delay_ms(250);
//		  }
		  switch(key)
 8000e94:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <main+0x170>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b31      	cmp	r3, #49	; 0x31
 8000e9a:	d002      	beq.n	8000ea2 <main+0xc2>
 8000e9c:	2b32      	cmp	r3, #50	; 0x32
 8000e9e:	d036      	beq.n	8000f0e <main+0x12e>
 8000ea0:	e04f      	b.n	8000f42 <main+0x162>
		  {
		  	  case ('1'):
		  	  {
					lcd_line2();
 8000ea2:	f7ff ff86 	bl	8000db2 <lcd_line2>
					lcd_print("TESTE 1");
 8000ea6:	482b      	ldr	r0, [pc, #172]	; (8000f54 <main+0x174>)
 8000ea8:	f7ff ff5a 	bl	8000d60 <lcd_print>
					delay_ms(250);
 8000eac:	20fa      	movs	r0, #250	; 0xfa
 8000eae:	f7ff fd47 	bl	8000940 <delay_ms>
					Usart_PutChar(USART3,key);
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <main+0x170>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4827      	ldr	r0, [pc, #156]	; (8000f58 <main+0x178>)
 8000eba:	f7ff fc7f 	bl	80007bc <Usart_PutChar>
					if (TIM_GetITStatus(TIM2, TIM_IT_Update))
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ec4:	f7ff fba8 	bl	8000618 <TIM_GetITStatus>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d038      	beq.n	8000f40 <main+0x160>
					{
						TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ed4:	f7ff fbc9 	bl	800066a <TIM_ClearITPendingBit>
						if (GPIO_ReadOutputDataBit(PORTALED,LEDVERDE))
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	481a      	ldr	r0, [pc, #104]	; (8000f48 <main+0x168>)
 8000ede:	f7ff fa6c 	bl	80003ba <GPIO_ReadOutputDataBit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d02b      	beq.n	8000f40 <main+0x160>
						{
							GPIO_ResetBits(PORTALED,LEDVERDE);
 8000ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eec:	4816      	ldr	r0, [pc, #88]	; (8000f48 <main+0x168>)
 8000eee:	f7ff fa8b 	bl	8000408 <GPIO_ResetBits>
							lcd_clear();
 8000ef2:	f7ff ff50 	bl	8000d96 <lcd_clear>
							lcd_line2();
 8000ef6:	f7ff ff5c 	bl	8000db2 <lcd_line2>
							lcd_print("CHATA");
 8000efa:	4818      	ldr	r0, [pc, #96]	; (8000f5c <main+0x17c>)
 8000efc:	f7ff ff30 	bl	8000d60 <lcd_print>
							delay_ms(500);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f7ff fd1c 	bl	8000940 <delay_ms>
							lcd_clear();
 8000f08:	f7ff ff45 	bl	8000d96 <lcd_clear>
						}
					}
					break;
 8000f0c:	e018      	b.n	8000f40 <main+0x160>
		  	  }

		  	case ('2'):
			  {
				lcd_line2();
 8000f0e:	f7ff ff50 	bl	8000db2 <lcd_line2>
				lcd_print("TESTE 2");
 8000f12:	4813      	ldr	r0, [pc, #76]	; (8000f60 <main+0x180>)
 8000f14:	f7ff ff24 	bl	8000d60 <lcd_print>
				GPIO_ResetBits(PORTALED,LEDVERDE);
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <main+0x168>)
 8000f1e:	f7ff fa73 	bl	8000408 <GPIO_ResetBits>
				GPIO_SetBits(PORTALED,LEDAZUL);
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <main+0x168>)
 8000f28:	f7ff fa60 	bl	80003ec <GPIO_SetBits>
				delay_ms(250);
 8000f2c:	20fa      	movs	r0, #250	; 0xfa
 8000f2e:	f7ff fd07 	bl	8000940 <delay_ms>
				Usart_PutChar(USART3,key);
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <main+0x170>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4807      	ldr	r0, [pc, #28]	; (8000f58 <main+0x178>)
 8000f3a:	f7ff fc3f 	bl	80007bc <Usart_PutChar>
				break;
 8000f3e:	e000      	b.n	8000f42 <main+0x162>
					break;
 8000f40:	bf00      	nop
			  }

		  }

		  lcd_clear();
 8000f42:	f7ff ff28 	bl	8000d96 <lcd_clear>
		  lcd_clear();
 8000f46:	e795      	b.n	8000e74 <main+0x94>
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	08001244 	.word	0x08001244
 8000f50:	20000028 	.word	0x20000028
 8000f54:	0800124c 	.word	0x0800124c
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	08001254 	.word	0x08001254
 8000f60:	0800125c 	.word	0x0800125c

08000f64 <USART3_IRQHandler>:

	 }
}

void USART3_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
    uint8_t r;
    // RXNE handler
    if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8000f6a:	f240 5125 	movw	r1, #1317	; 0x525
 8000f6e:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <USART3_IRQHandler+0x84>)
 8000f70:	f7ff fbb5 	bl	80006de <USART_GetITStatus>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d032      	beq.n	8000fe0 <USART3_IRQHandler+0x7c>
    {
        r = Usart_Get(USART3);
 8000f7a:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <USART3_IRQHandler+0x84>)
 8000f7c:	f7ff fc09 	bl	8000792 <Usart_Get>
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
        int i = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
        switch (r) {
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b61      	cmp	r3, #97	; 0x61
 8000f8c:	d004      	beq.n	8000f98 <USART3_IRQHandler+0x34>
 8000f8e:	2b76      	cmp	r3, #118	; 0x76
 8000f90:	d00d      	beq.n	8000fae <USART3_IRQHandler+0x4a>
 8000f92:	2b31      	cmp	r3, #49	; 0x31
 8000f94:	d016      	beq.n	8000fc4 <USART3_IRQHandler+0x60>
					Usart_PutNumber(USART3,i);
					Usart_PutString(USART3," s\n\r");
					break;
        }
    }
}
 8000f96:	e023      	b.n	8000fe0 <USART3_IRQHandler+0x7c>
        			GPIO_ResetBits(PORTALED, LEDVERDE);
 8000f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <USART3_IRQHandler+0x88>)
 8000f9e:	f7ff fa33 	bl	8000408 <GPIO_ResetBits>
        			GPIO_SetBits(PORTALED, LEDAZUL);
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <USART3_IRQHandler+0x88>)
 8000fa8:	f7ff fa20 	bl	80003ec <GPIO_SetBits>
        			break;
 8000fac:	e018      	b.n	8000fe0 <USART3_IRQHandler+0x7c>
					GPIO_ResetBits(PORTALED, LEDAZUL);
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <USART3_IRQHandler+0x88>)
 8000fb4:	f7ff fa28 	bl	8000408 <GPIO_ResetBits>
					GPIO_SetBits(PORTALED, LEDVERDE);
 8000fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <USART3_IRQHandler+0x88>)
 8000fbe:	f7ff fa15 	bl	80003ec <GPIO_SetBits>
					break;
 8000fc2:	e00d      	b.n	8000fe0 <USART3_IRQHandler+0x7c>
					Usart_PutString(USART3,"Tempo = ");
 8000fc4:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <USART3_IRQHandler+0x8c>)
 8000fc6:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <USART3_IRQHandler+0x84>)
 8000fc8:	f7ff fc0f 	bl	80007ea <Usart_PutString>
					Usart_PutNumber(USART3,i);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <USART3_IRQHandler+0x84>)
 8000fd2:	f7ff fc21 	bl	8000818 <Usart_PutNumber>
					Usart_PutString(USART3," s\n\r");
 8000fd6:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <USART3_IRQHandler+0x90>)
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <USART3_IRQHandler+0x84>)
 8000fda:	f7ff fc06 	bl	80007ea <Usart_PutString>
					break;
 8000fde:	bf00      	nop
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	08001264 	.word	0x08001264
 8000ff4:	08001270 	.word	0x08001270

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ffc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ffe:	e003      	b.n	8001008 <LoopCopyDataInit>

08001000 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001002:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001004:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001006:	3104      	adds	r1, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800100c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800100e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001010:	d3f6      	bcc.n	8001000 <CopyDataInit>
	ldr	r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001014:	e002      	b.n	800101c <LoopFillZerobss>

08001016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001016:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001018:	f842 3b04 	str.w	r3, [r2], #4

0800101c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800101e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001020:	d3f9      	bcc.n	8001016 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8001022:	f000 f837 	bl	8001094 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8001026:	f000 f8dd 	bl	80011e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff fed9 	bl	8000de0 <main>
	bx	lr
 800102e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001030:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8001034:	08001280 	.word	0x08001280
	ldr	r0, =_sdata
 8001038:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800103c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001040:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001044:	2000002c 	.word	0x2000002c

08001048 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_IRQHandler>

0800104a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
	...

08001094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001098:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <SystemInit+0x64>)
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <SystemInit+0x64>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80010a4:	4914      	ldr	r1, [pc, #80]	; (80010f8 <SystemInit+0x64>)
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <SystemInit+0x64>)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <SystemInit+0x68>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <SystemInit+0x64>)
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <SystemInit+0x64>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <SystemInit+0x64>)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <SystemInit+0x64>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SystemInit+0x64>)
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SystemInit+0x64>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <SystemInit+0x64>)
 80010da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010de:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SystemInit+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80010e6:	f000 f80d 	bl	8001104 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SystemInit+0x6c>)
 80010ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f0:	609a      	str	r2, [r3, #8]
#endif 
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	f8ff0000 	.word	0xf8ff0000
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8001108:	f000 f802 	bl	8001110 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800111e:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <SetSysClockTo24+0xd0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <SetSysClockTo24+0x38>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001146:	d1f0      	bne.n	800112a <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <SetSysClockTo24+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001154:	2301      	movs	r3, #1
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	e001      	b.n	800115e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d137      	bne.n	80011d4 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800116c:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <SetSysClockTo24+0xd0>)
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <SetSysClockTo24+0xd0>)
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001186:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <SetSysClockTo24+0xd0>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <SetSysClockTo24+0xd0>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8001192:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <SetSysClockTo24+0xd0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011a0:	bf00      	nop
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <SetSysClockTo24+0xd0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f9      	beq.n	80011a2 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <SetSysClockTo24+0xd0>)
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <SetSysClockTo24+0xd0>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f023 0303 	bic.w	r3, r3, #3
 80011b8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <SetSysClockTo24+0xd0>)
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <SetSysClockTo24+0xd0>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80011c6:	bf00      	nop
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SetSysClockTo24+0xd0>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d1f9      	bne.n	80011c8 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <__libc_init_array>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	2500      	movs	r5, #0
 80011e8:	4e0c      	ldr	r6, [pc, #48]	; (800121c <__libc_init_array+0x38>)
 80011ea:	4c0d      	ldr	r4, [pc, #52]	; (8001220 <__libc_init_array+0x3c>)
 80011ec:	1ba4      	subs	r4, r4, r6
 80011ee:	10a4      	asrs	r4, r4, #2
 80011f0:	42a5      	cmp	r5, r4
 80011f2:	d109      	bne.n	8001208 <__libc_init_array+0x24>
 80011f4:	f000 f81a 	bl	800122c <_init>
 80011f8:	2500      	movs	r5, #0
 80011fa:	4e0a      	ldr	r6, [pc, #40]	; (8001224 <__libc_init_array+0x40>)
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <__libc_init_array+0x44>)
 80011fe:	1ba4      	subs	r4, r4, r6
 8001200:	10a4      	asrs	r4, r4, #2
 8001202:	42a5      	cmp	r5, r4
 8001204:	d105      	bne.n	8001212 <__libc_init_array+0x2e>
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800120c:	4798      	blx	r3
 800120e:	3501      	adds	r5, #1
 8001210:	e7ee      	b.n	80011f0 <__libc_init_array+0xc>
 8001212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001216:	4798      	blx	r3
 8001218:	3501      	adds	r5, #1
 800121a:	e7f2      	b.n	8001202 <__libc_init_array+0x1e>
 800121c:	08001278 	.word	0x08001278
 8001220:	08001278 	.word	0x08001278
 8001224:	08001278 	.word	0x08001278
 8001228:	0800127c 	.word	0x0800127c

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
